##  memory
###	JVM的统计监测工具:jstat
*	类加载统计
	*	jstat -class pid
*	编译统计
	*	jstat -compiler pid
*	垃圾回收统计
	*	jstat -gc pid
			S0C：第一个幸存区的大小
				S1C：第二个幸存区的大小
				S0U：第一个幸存区的使用大小
				S1U：第二个幸存区的使用大小
				EC：伊甸园区的大小
				EU：伊甸园区的使用大小
				OC：老年代大小
				OU：老年代使用大小
				MC：方法区大小
				MU：方法区使用大小
				CCSC:压缩类空间大小
				CCSU:压缩类空间使用大小
				YGC：年轻代垃圾回收次数
				YGCT：年轻代垃圾回收消耗时间
				FGC：老年代垃圾回收次数
				FGCT：老年代垃圾回收消耗时间
				GCT：垃圾回收消耗总时间
*	堆内存统计
	*	jstat -gccapacity pid
*	新生代垃圾回收统计:  jstat -gcnew 19570
*	新生代内存统计: jstat -gcnewcapacity 19570
*	老年代垃圾回收统计: jstat -gcold 19570
*	JDK8 下 元数据空间统计: jstat -gcmetacapacity 7172
*	总结垃圾回收统计: jstat -gcutil 19570

###  输出所有内存中对象的工具：jmap
*	-dump:[live,]format=b,file=<filename> 使用hprof二进制形式,输出jvm的heap内容到文件=.  live子选项是可选的，假如指定live选项,那么只输出活的对象到文件. 
	*	jmap -dump:live,format=b,file=myjmapfile.txt 19570
*	-finalizerinfo 打印正等候回收的对象的信息
*	 -heap 打印heap的概要信息，GC使用的算法，heap（堆）的配置及JVM堆内存的使用情况
	*	jmap -heap 19570
*	-histo[:live] -histo[:live] 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量. 
	*	jmap -histo:live 19570


###	导出堆、查看Java进程、导出线程信息、执行GC、还可以进行采样分析：jcmd  -- jdk 1.7
*	查看性能统计：jcmd pid PerfCounter.print
*	列出当前运行的 java 进程可以执行的操作： jcmd pid help
*	查看 JVM 的启动时长： jcmd PID VM.uptime
*	查看系统中类统计信息（和jmap -histo pid的效果是一样的）：jcmd PID GC.class_histogram
*	查看线程堆栈信息： jcmd PID Thread.print
*	查看 JVM 的Heap Dump（跟 jmap命令：jmap -dump:format=b,file=heapdump.phrof pid 效果一样） ： jcmd PID GC.heap_dump FILE_NAME
*	查看 JVM 的属性信息 ： jcmd PID VM.system_properties
*	查看 JVM 的启动参数： jcmd PID VM.flags
*	查看 JVM 的启动命令行： jcmd PID VM.command_line
*	 对 JVM 执行 java.lang.System.runFinalization()： jcmd PID GC.run_finalization
*	对 JVM 执行 java.lang.System.gc()： jcmd PID GC.run
*	查看目标jvm进程的版本信息：jcmd PID VM.version
*	-XX:NativeMemoryTracking=detailJVM参数重启项目，查看到的内存分布：jcmd pid VM.native_memory detail

###	pmap查看内存分布,linux命令
*	pmap -x 5256 | sort -k 3 -n -r

### 使用系统层面的工具定位堆外内存：gperftools -- TODO

### 使用strace追踪系统调用  -- https://www.cnblogs.com/machangwei-8/p/10388883.html
*	拦截并记录指定进程的系统调用以及进程接收到的信号
	*	可以对特定的系统调用或者几组系统调用进行过滤
	*	可以通过统计特定系统调用的调用次数、耗费的时间、成功和失败的次数来配置(profile)系统调用的使用I
	*	跟踪发送给进程的信号量
	*	可以通过pid附着(attach)到任何运行的进程
*	Linux内核目前有300多个系统调用，详细的列表可以通过syscalls手册页查看。这些系统调用主要分为几类：
	*	文件和设备访问类 比如open/close/read/write/chmod等
	*	进程管理类 fork/clone/execve/exit/getpid等
	*	信号类 signal/sigaction/kill 等
	*	内存管理 brk/mmap/mlock等
	*	进程间通信IPC shmget/semget * 信号量，共享内存，消息队列等
	*	网络通信 socket/connect/sendto/sendmsg 等
*	strace常用选项：
	*	-tt 在每行输出的前面，显示毫秒级别的时间
	*	-T 显示每次系统调用所花费的时间
	*	-v 对于某些相关调用，把完整的环境变量，文件stat结构等打出来。
	*	-f 跟踪目标进程，以及目标进程创建的所有子进程
	*	-e 控制要跟踪的事件和跟踪行为,比如指定要跟踪的系统调用名称
		*	-e trace=file     跟踪和文件访问相关的调用(参数中有文件名)
		*	-e trace=process  和进程管理相关的调用，比如fork/exec/exit_group
		*	-e trace=network  和网络通信相关的调用，比如socket/sendto/connect
		*	-e trace=signal    信号发送和处理相关，比如kill/sigaction
		*	-e trace=desc  和文件描述符相关，比如write/read/select/epoll等
		*	-e trace=ipc 进程见同学相关，比如shmget等
	*	-o 把strace的输出单独写到指定的文件
	*	-s 当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是32个字节
	*	-p 指定要跟踪的进程pid, 要同时跟踪多个pid, 重复多次-p选项即可。	


##  分析案例
*	https://mp.weixin.qq.com/s?__biz=MzAxNjk4ODE4OQ==&mid=2247488628&idx=1&sn=bc0699a686b3a3fb0af14d080fd58676&chksm=9bed3506ac9abc10a8c8861b914ddb8536a0ec2a2f5f22d10fc0f0d4fd2a4e142f69f5f8fe45&scene=126&sessionid=1586478457&key=6a160edf960d296fdfecee8a6b0c049fd061d62b165487bbcb1dfc15593b96c1d8c689aab4d277e98632383cb1f86edecd9369e351d3338c05601234bdcb9aaff7ab6de0a2f6f963a9bde0f7f187303a&ascene=1&uin=Mjk1NTAwNzcwMg%3D%3D&devicetype=Windows+10&version=62080079&lang=zh_CN&exportkey=ASmTKUD8tLB1FJDv%2F4VAXF8%3D&pass_ticket=d%2FlMyUrC7U17%2FFfLNlR9vWU89AJCyB%2BzxXh4d4B01erpipL53JR%2B9L5pVQzsbbHh

2.JConsole
加jvm 启动参数即可： 
-Dcom.sun.management.jmxremote  -Dcom.sun.management.jmxremote.port=8011 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false


3.java证书列表
keytool -list -v  -keystore "$JAVA_HOME/jre/lib/security/cacerts" -storepass changeit

4.jvm
http://blog.csdn.net/yaowj2/article/details/7107818
http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html